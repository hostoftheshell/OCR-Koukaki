{"version":3,"sources":["custom-swipper.js","script.js"],"names":["document","addEventListener","Swiper","speed","loop","grabCursor","autoplay","delay","disableOnInteraction","effect","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","centeredSlides","breakpoints","480","slidesPerView","spaceBetween","699","observerOptions","root","rootMargin","threshold","observer","IntersectionObserver","handleIntersect","elementsToObserve","querySelectorAll","entries","forEach","entry","isIntersecting","console","log","target","animateEntry","unobserve","animateSectionEntry","animateTitleEntry","animateLogoEntry","classList","remove","animationClass","some","cls","contains","add","targetTitles","length","targetTitle","words","textContent","split","word","index","span","createElement","style","opacity","appendChild","createTextNode","setTimeout","targetLogo","querySelector","element","observe","initParallax","bigCloud","littleCloud","placeSection","setTransform","value","transform","window","sectionOffsetTop","offsetTop","scrollPosition","scrollY","documentElement","scrollTop","translationX","Math","min","requestAnimationFrame","menuButton","menuContent","menuLinks","toggleMenu","once","toggle","expanded","getAttribute","setAttribute","link"],"mappings":"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","file":"main.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n    const swiper = new Swiper('.swiper-container', {\n        // Réglages généraux\n        speed: 1000,\n        loop: true,\n        grabCursor: true,\n        // Paramètres de lecture automatique\n        autoplay: {\n            delay: 2500,\n            disableOnInteraction: false,\n        },\n        // Paramètres d'effet\n        effect: 'coverflow',\n        coverflowEffect: {\n            rotate: 50,\n            stretch: 0,\n            depth: 90,\n            modifier: 1,\n            slideShadows: false,\n        },\n        // Alignement des slides\n        centeredSlides: false,\n        // Responsive breakpoints\n        breakpoints: {\n            480: {\n                slidesPerView: 1,\n                spaceBetween: 40,\n            },\n            699: {\n                slidesPerView: 3,\n                spaceBetween: 50,\n            },\n        },\n    });\n});","const observerOptions = {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.1\n};\n\n// Create the observer\nconst observer = new IntersectionObserver(handleIntersect, observerOptions);\n\n// Tell the observer which elements to track\nconst elementsToObserve = document.querySelectorAll('.banner, .story, #characters, #place, #studio, .award-section');\nelementsToObserve.forEach(element => observer.observe(element));\n\n// Handle intersecting elements\nfunction handleIntersect(entries, observer) {\n    entries.forEach(entry => {\n        if (entry.isIntersecting) {\n            console.log('Intersecting element:', entry.target);\n            animateEntry(entry);\n            observer.unobserve(entry.target);\n        }\n    });\n}\n\nfunction animateEntry(entry) {\n    animateSectionEntry(entry);\n    animateTitleEntry(entry);\n    animateLogoEntry(entry);\n}\n\n// Fonction d'animation pour l'apparition des sections\nfunction animateSectionEntry(entry) {\n    const targetSections = ['banner', 'award-section'];\n    entry.target.classList.remove('hidden-opacity');\n\n    const animationClass = targetSections.some(cls => entry.target.classList.contains(cls))\n        ? 'section__fade-in--down'\n        : 'section__fade-in--up';\n\n    entry.target.classList.add(animationClass);\n}\n// Fonction d'animation pour l'apparition des titres\nfunction animateTitleEntry(entry) {\n    const targetTitles = entry.target.querySelectorAll('h2, h3');\n    if (targetTitles.length === 0) {\n        console.log('No h2 or h3 element found within the target:', entry.target);\n        return;\n    }\n\n    targetTitles.forEach(targetTitle => {\n        const words = targetTitle.textContent.split(' ');\n        targetTitle.textContent = '';\n\n        words.forEach((word, index) => {\n            const span = document.createElement('span');\n            span.textContent = word;\n            span.style.opacity = 0; // Set initial opacity to 0\n            targetTitle.appendChild(span);\n\n            // Add space between words, except for the last word\n            if (index < words.length - 1) {\n                targetTitle.appendChild(document.createTextNode(' '));\n            }\n\n            // Add the fade-in class with a delay\n            setTimeout(() => {\n                span.classList.add('title__fade-in--up');\n            }, index * 200); // 100ms delay per word, adjust as needed\n        });\n    });\n}\n\n// Fonction d'animation pour l'apparition du logo\nfunction animateLogoEntry(entry) {\n    const targetLogo = entry.target.querySelector('.banner__logo');\n    if (targetLogo) {\n        targetLogo.classList.remove('hidden-opacity');\n        targetLogo.classList.add('banner__logo--animated');\n        console.log(targetLogo);\n    }\n}\n\n\n// Fonction d'animation pour l'effet de parallaxe des nuages\ndocument.addEventListener('DOMContentLoaded', function () {\n    // Function to initialize the parallax effect\n    function initParallax() {\n        const bigCloud = document.querySelector('.place__big-cloud');\n        const littleCloud = document.querySelector('.place__little-cloud');\n        const placeSection = document.querySelector('#place');\n\n        // Event handler for scroll event\n        function handleScroll() {\n            const sectionOffsetTop = placeSection.offsetTop;\n            const scrollPosition = window.scrollY || document.documentElement.scrollTop;\n            if (scrollPosition >= sectionOffsetTop) {\n                const parallaxValue = (scrollPosition - sectionOffsetTop) / 5;\n                const translationX = Math.min(parallaxValue, 300);\n\n                // Apply transform property to clouds\n                requestAnimationFrame(() => {\n                    setTransform(bigCloud, -translationX);\n                    setTransform(littleCloud, -translationX);\n                });\n            }\n        }\n\n        // Function to set transform property for cloud elements\n        function setTransform(element, value) {\n            element.style.transform = `translateX(${value}px)`;\n        }\n\n        // Attach scroll event listener\n        window.addEventListener('scroll', handleScroll);\n    }\n\n    // Initialize parallax effect\n    initParallax();\n});\n\n// Fonction d'animation pour le menu de navigation principal\ndocument.addEventListener('DOMContentLoaded', function () {\n    const menuButton = document.querySelector('.menu__button');\n    const menuContent = document.querySelector('#primary-menu');\n    const menuLinks = document.querySelectorAll('#primary-menu a');\n\n    function toggleMenu() {\n        // Check if the menu is currently open\n        const isOpen = menuContent.classList.contains('menu-active');\n\n        if (isOpen) {\n            // Add the 'menu-closing' class to trigger the closing animation\n            menuContent.classList.add('menu-closing');\n\n            // Remove 'menu-active' after the animation ends\n            menuContent.addEventListener('animationend', function () {\n                menuContent.classList.remove('menu-active');\n                menuContent.classList.remove('menu-closing');\n            }, { once: true });\n        } else {\n            // Add 'menu-active' to open the menu\n            menuContent.classList.add('menu-active');\n        }\n\n        // Toggle the 'menu-active' class on the button\n        menuButton.classList.toggle('menu-active');\n\n        // Update aria-expanded attribute\n        const expanded = menuButton.getAttribute('aria-expanded') === 'true' || false;\n        menuButton.setAttribute('aria-expanded', !expanded);\n    }\n\n    // Attach click event to the menu button\n    menuButton.addEventListener('click', toggleMenu);\n\n    // Attach click event to each menu link to close the menu when a link is clicked\n    menuLinks.forEach(function (link) {\n        link.addEventListener('click', function () {\n            // Only close the menu if it's currently open\n            if (menuContent.classList.contains('menu-active')) {\n                toggleMenu();\n            }\n        });\n    });\n});"]}