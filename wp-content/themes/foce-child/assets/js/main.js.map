{"version":3,"sources":["custom-swipper.js","script.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"main.js","sourcesContent":["// Initialisation de 'Swiper' avec Paramètres Personnalisés\ndocument.addEventListener('DOMContentLoaded', () => {\n    const swiper = new Swiper('.swiper-container', {\n        // Réglages généraux\n        speed: 1000,\n        loop: true,\n        grabCursor: true,\n        // Paramètres de lecture automatique\n        autoplay: {\n            delay: 2500,\n            disableOnInteraction: false,\n        },\n        // Paramètres d'effet\n        effect: 'coverflow',\n        coverflowEffect: {\n            rotate: 50,\n            stretch: 0,\n            depth: 90,\n            modifier: 1,\n            slideShadows: false,\n        },\n        // Alignement des slides\n        centeredSlides: false,\n        // Responsive breakpoints\n        breakpoints: {\n            480: {\n                slidesPerView: 1,\n                spaceBetween: 40,\n            },\n            699: {\n                slidesPerView: 3,\n                spaceBetween: 50,\n            },\n        },\n    });\n});","// Initialisation de l'observateur d'intersection\nconst observerOptions = {\n    root: null, // L'élément racine pour l'observation, null signifie que c'est le viewport\n    rootMargin: '0px', // Marges autour de l'élément racine\n    threshold: 0.1 // Pourcentage d'intersection pour déclencher l'observation\n};\n\n// Création de l'observateur\nconst observer = new IntersectionObserver(handleIntersect, observerOptions);\n\n// Indique à l'observateur quels éléments suivre\nconst elementsToObserve = document.querySelectorAll('.banner, .story, #characters, #place, #studio, .award-section');\nelementsToObserve.forEach(element => observer.observe(element));\n\n// Gère les éléments intersectés\nfunction handleIntersect(entries, observer) {\n    entries.forEach(entry => {\n        if (entry.isIntersecting) { // Si l'élément intersecte le viewport\n            console.log('Élément en intersection :', entry.target);\n            animateEntry(entry); // Appel la fonction pour animer l'entrée\n            observer.unobserve(entry.target); // Arrête d'observer cet élément\n        }\n    });\n}\n// Fonction d'animation principale pour l'apparition des éléments\nfunction animateEntry(entry) {\n    animateSectionEntry(entry); // Appel la fonction d'animation pour les sections\n    animateTitleEntry(entry);   // Appel la fonction d'animation pour les titres\n    animateLogoEntry(entry);    // Appel la fonction d'animation pour les logos\n    animateParagraphEntry(entry); // Appel la fonction d'animation pour les paragraphes\n}\n\n// Fonction d'animation pour l'apparition des sections\nfunction animateSectionEntry(entry) {\n    const targetSections = ['banner', 'award-section']; // Sections spécifiques à vérifier\n    entry.target.classList.remove('hidden-opacity'); // Retire la classe css d'opacité cachée\n\n    // Détermine la classe d'animation à ajouter en fonction de la section\n    const animationClass = targetSections.some(cls => entry.target.classList.contains(cls))\n        ? 'section__fade-in--down' // Animation pour descendre\n        : 'section__fade-in--up';   // Animation pour monter\n\n    entry.target.classList.add(animationClass); // Ajoute la classe d'animation appropriée\n}\n\n// Fonction d'animation pour l'apparition des titres\nfunction animateTitleEntry(entry) {\n    const targetTitles = entry.target.querySelectorAll('h2, h3'); // Sélectionner les éléments h2 et h3\n    if (targetTitles.length === 0) {\n        console.log('Aucun élément h2 ou h3 trouvé dans la cible :', entry.target);\n        return;\n    }\n\n    targetTitles.forEach(targetTitle => {\n        const words = targetTitle.textContent.split(' '); // Divise le texte en mots\n        targetTitle.textContent = '';\n\n        words.forEach((word, index) => {\n            const span = document.createElement('span');\n            span.textContent = word;\n            span.style.opacity = 0; // Définir l'opacité initiale à 0\n            targetTitle.appendChild(span);\n\n            // Ajouter un espace entre les mots, sauf pour le dernier mot\n            if (index < words.length - 1) {\n                targetTitle.appendChild(document.createTextNode(' '));\n            }\n\n            // Ajouter la classe d'animation avec un délai\n            setTimeout(() => {\n                span.classList.add('title__fade-in--up');\n            }, index * 200); // Délai de 200ms par mot, ajuster si nécessaire\n        });\n    });\n}\n\n// Fonction d'animation pour l'apparition du logo\nfunction animateLogoEntry(entry) {\n    const targetLogo = entry.target.querySelector('.banner__logo'); // Sélectionne l'élément du logo\n    if (targetLogo) {\n        targetLogo.classList.remove('hidden-opacity'); // Retire l'opacité cachée\n        targetLogo.classList.add('banner__logo--animated'); // Ajoute la classe d'animation du logo\n    }\n}\n// Fonction d'animation pour l'apparition des paragraphes\nfunction animateParagraphEntry(entry) {\n    const targetParagraphs = entry.target.querySelectorAll('p');\n    if (targetParagraphs.length > 0) {\n        targetParagraphs.forEach(paragraph => {\n            paragraph.classList.add('paragraph__fade-in--down'); // Ajoute la classe d'animation des paragraphes\n        });\n    }\n}\n\n// Fonction d'animation pour l'effet de parallaxe des nuages\ndocument.addEventListener('DOMContentLoaded', function () {\n    // Fonction pour initialiser l'effet de parallaxe\n    function initParallax() {\n        const bigCloud = document.querySelector('.place__big-cloud'); // Sélectionner le grand nuage\n        const littleCloud = document.querySelector('.place__little-cloud'); // Sélectionner le petit nuage\n        const placeSection = document.querySelector('#place'); // Sélectionner la section 'place'\n\n        // Gestionnaire d'événements pour le défilement\n        function handleScroll() {\n            const sectionOffsetTop = placeSection.offsetTop; // Obtenir la position du haut de la section\n            const scrollPosition = window.scrollY || document.documentElement.scrollTop; // Obtenir la position de défilement\n            if (scrollPosition >= sectionOffsetTop) {\n                const parallaxValue = (scrollPosition - sectionOffsetTop) / 5; // Calculer la valeur de parallaxe\n                const translationX = Math.min(parallaxValue, 300); // Limiter la translation à 300\n\n                // Appliquer la propriété de transformation aux nuages\n                requestAnimationFrame(() => {\n                    setTransform(bigCloud, -translationX); // Transformer le grand nuage\n                    setTransform(littleCloud, -translationX); // Transformer le petit nuage\n                });\n            }\n        }\n        // Initialiser le gestionnaire de défilement\n        window.addEventListener('scroll', handleScroll);\n    }\n\n    // Fonction pour appliquer la transformation\n    function setTransform(element, value) {\n        if (element) {\n            element.style.transform = `translateX(${value}px)`;\n        }\n    }\n\n    // Initialiser l'effet de parallaxe\n    initParallax();\n});\n\n\n// Fonction d'animation pour le menu de navigation principal\ndocument.addEventListener('DOMContentLoaded', function () {\n    const menuButton = document.querySelector('.menu__button'); // Sélectionne le bouton du menu\n    const menuContent = document.querySelector('#primary-menu'); // Sélectionne le contenu du menu\n    const menuLinks = document.querySelectorAll('#primary-menu a'); // Sélectionne tous les liens du menu\n\n    function toggleMenu() {\n        // Vérifie si le menu est actuellement ouvert\n        const isOpen = menuContent.classList.contains('menu-active');\n\n        if (isOpen) {\n            // Ajoute la classe 'menu-closing' pour déclencher l'animation de fermeture\n            menuContent.classList.add('menu-closing');\n\n            // Retire 'menu-active' après la fin de l'animation\n            menuContent.addEventListener('animationend', function () {\n                menuContent.classList.remove('menu-active');\n                menuContent.classList.remove('menu-closing');\n            }, { once: true });\n        } else {\n            // Ajoute 'menu-active' pour ouvrir le menu\n            menuContent.classList.add('menu-active');\n        }\n\n        // Bascule la classe 'menu-active' sur le bouton\n        menuButton.classList.toggle('menu-active');\n\n        // Met à jour l'attribut aria-expanded\n        const expanded = menuButton.getAttribute('aria-expanded') === 'true' || false;\n        menuButton.setAttribute('aria-expanded', !expanded);\n    }\n\n    // Attache l'événement de clic au bouton du menu\n    menuButton.addEventListener('click', toggleMenu);\n\n    // Attache l'événement de clic à chaque lien du menu pour fermer le menu lorsqu'un lien est cliqué\n    menuLinks.forEach(function (link) {\n        link.addEventListener('click', function () {\n            // Ferme le menu seulement s'il est actuellement ouvert\n            if (menuContent.classList.contains('menu-active')) {\n                toggleMenu();\n            }\n        });\n    });\n});\n"]}